# -*- coding: utf-8 -*-
"""Python_assign1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F_SziajSBGzvUN2uy_SQBK7pHPAvukX4
"""

#Task1 - Sales Data Summary
Category_A = 50
Category_B = 30
# Calculate total units sold
total_units_sold=Category_A+Category_B
print("Total Units Sold is",total_units_sold)
# Calculate the difference between the two categories
difference_units_sold=Category_A-Category_B
print("Difference between Category A and Category B is",difference_units_sold)
# Calculate the ratio of units sold
ratio_units_sold=Category_A/Category_B
print("Ratio of units sold is",ratio_units_sold)

#Task2 - Customer Age Data
customer_name= "John Doe"
customer_age=35
print("Marketing Email Compaign:")
print(f"Dear {customer_name},at {customer_age},you're eligible for our premium loyalty program")

#Task 3 - Product List Management
product_price=[100,150,99,130,110,55,340,95,60,125]
# Extract the highest and lowest prices
highest_price=max(product_price)
lowest_price=min(product_price)
print("The Highest price is", highest_price)
print("The Lowest price is", lowest_price)
# Create a new list with mid-range products
mid_range_products = [price for price in product_price if price != highest_price and price != lowest_price]
premium_product_price=[300,240,380,200,75]
product_price.extend(premium_product_price)
print("Mid-range Products:", mid_range_products)
print("The updated product list is",product_price)

#Task 4 - Inventory lookup
# Dictionary storing key information about a product
product_details={"product_name": "keyboard",
             "SKU": "350-123",
             "price": "500",
             "category":"Elecronics"}

# Function to retrieve and print product name and SKU
def get_product_info(details):
    product_name = details.get("product_name", "product name not available")
    sku = details.get("SKU", "SKU not available")
    print("Product Information:")
    print(f"Product Name: {product_name}")
    print(f"SKU: {sku}")

# Query by a customer service representative
get_product_info(product_details)

#Task 5 - Stock level Alert System
stock=int(input("Enter the current stock level:"))
threshold = int(input("Enter the threshold required: "))
if(stock < threshold):
   print("Reorder Now")
else:
   print("Stock is sufficient")

#Task 6: Sales Report Formatting
product_list=["keyboard","mouse","monitor","hard drive","optical drive"]
# Using a for loop
for product in product_list:
    print("Products in Uppercase using for loop:",product.upper())
# Using a while loop
index=0
while index < len(product_list):
    product=product_list[index]
    print("Products in Uppercase using while loop:",product_list[index].upper())
    index+=1

#Task 7: Area Calculation for Store Layout
def calculate_area(length,width):
    return length*width

# List of store sections with their dimensions (length, width)
store_sections = [
    {"section": "Entrance", "length": 10, "width": 5},
    {"section": "Checkout", "length": 8, "width": 4},
    {"section": "Electronics", "length": 15, "width": 12},
    {"section": "Clothing", "length": 20, "width": 10},
    {"section": "Grocery", "length": 18, "width": 12}
]

# Calculate and print the area of each store section
print("Store Section Areas:")
for section in store_sections:
    area = calculate_area(section["length"], section["width"])
    print(f"{section['section']} Area: {area} square units")

#Task 8: Customer Feedback Analysis
# Function to count vowels in feedback message
def count_vowels(feedback):
    vowels = "aeiouAEIOU"
    return sum(1 for char in feedback if char in vowels)

# Function to reverse the feedback message using slicing technique
def reverse_message(feedback):
    return feedback[::-1]

feedback_message = "The service was great and the staff was very helpful!"

# Analyze customer feedback
vowel_count = count_vowels(feedback_message)
reversed_feedback = reverse_message(feedback_message)

print("Customer Feedback Analysis:")
print(f"Original Feedback: {feedback_message}")
print(f"Number of Vowels: {vowel_count}")
print(f"Reversed Feedback: {reversed_feedback}")

#Task 9: Price Filtering Tool
products={"Product 1":{"name":"keyboard","price":200},
          "Product 2":{"name":"mouse","price":150},
          "Product 3":{"name":"monitor","price":1000},
          "Product 4":{"name":"printer","price":500},
          "Product 5":{"name":"scanner","price":800}}
threshold=int(input("Enter the threshold price:"))
eligible_products=[]
for product_key, product_info in products.items(): # Iterate through key-value pairs
  if product_info["price"] >= threshold:
      eligible_products.append(product_info)
print("Eligible Products for Discount Campaign:")
for product in eligible_products:
    print(f"Name: {product['name']}, Price: {product['price']}")

#Task 10 - Sales Log File Management
text_file_name="Sales_log.txt"
sales_summary=["Today's sales performance exceeded expectations, achieving 15% above target. High-performing categories include electronics and home goods, contributing 60% of total revenue."]
with open(text_file_name,"w") as file:
    file.writelines(sales_summary)
with open(text_file_name,"r") as file:
    content=file.read()
print("Sales Log File Content:")
print(content)

#Task 11 - Daily Sales Average
sales_data={"Monday": 1200,
            "Tuesday": 1500,
            "Wednesday": 1300,
            "Thursday": 1400,
            "Friday": 1600,
            "Saturday": 2000,
            "Sunday": 2500}
total_sales=sum(sales_data.values())
average_sales=total_sales/len(sales_data)
print("Daily Sales Average:",average_sales)

#Task 12 -  Customer Segmentation
customer_spendings=[200,350,150,400,700,550,300,120,100,600]
categories=[]
for spending in customer_spendings:
  if spending<200:
    categories.append("Low")
  elif spending<500:
    categories.append("Medium")
  else:
    categories.append("High")
print("Customer Spending Categorization:")
i=1
for spending, category in zip(customer_spendings, categories):
    print(f"Customer {i}: Spending: {spending}, Category: {category}")
    i=i+1

#Task#13-Discount Calculation
def calculate_discounted_price(original_price, discount_percentage):
    return original_price * (1 - discount_percentage / 100)

# List of products with original prices and discounts
products = [
    ("Product A", 100, 10),
    ("Product B", 200, 15),
    ("Product C", 300, 20),
    ("Product D", 400, 25),
    ("Product E", 500, 30),
]
print("Final Prices After Discounts:")
for name, price, discount in products:
    final_price = calculate_discounted_price(price, discount)
    print(f"{name}: Original Price = ${price}, Discount = {discount}%, Final Price = ${final_price:}")

#Task 14 - Customer Feedback Sentiment Analysis
# List of positive and negative words
positive_words=["good", "happy", "excellent","great","amazing"]
negative_words=["bad", "awful", "poor","terrible","disappointed"]
customer_feedback= [
    "The product is good and I am happy with it.",
    "I am very disappointed with the service.",
    "Excellent quality and great value for money!",
    "The experience was terrible and customer support was poor.",
    "Amazing product, absolutely love it!",
]
# Function to analyze sentiment
def analyze_sentiment(feedback):
 feedback_lower = feedback.lower()
 if any(word in feedback_lower for word in positive_words):
        return "Positive"
 elif any(word in feedback_lower for word in negative_words):
        return "Negative"
print("Customer Feedback Sentiment Analysis:")
for feedback in customer_feedback:
    sentiment = analyze_sentiment(feedback)
    print(f"Feedback: \"{feedback}\" => Sentiment: {sentiment}")

#Task 15 -Employee Salary Increment Calculator
employee_data={
    "Rahul": {"salary": 55000, "rating": 5},
    "Jahnavi": {"salary": 45000, "rating": 4},
    "Bunty": {"salary": 50000, "rating": 3},
    "Anitha": {"salary": 40000, "rating": 2},
    "Deepali": {"salary": 60000, "rating": 1},
}
increments={
    5: 20,  # 20% increment for rating 5
    4: 15,  # 15% increment for rating 4
    3: 10,  # 10% increment for rating 3
    2: 5,   # 5% increment for rating 2
    1: 0    # 0% increment for rating 1
}
print("Updated Salaries After Increment:")
for name, info in employee_data.items():
    current_salary = info["salary"]
    rating = info["rating"]
    increment_percentage = increments.get(rating, 0)
    new_salary = current_salary * (1 + increment_percentage / 100)
    print(f"{name}: Current Salary = ${current_salary}, Rating = {rating}, Increment = {increment_percentage}%, New Salary = ${new_salary:.2f}")

#Task 16: Monthly Sales Report Generator
text_file_name="monthly_report.txt"
daily_sales_data=[100,200,300,400,500,600,700,650,550,430,350,280,310,180,220,450,120,340,570,630,720,800,150,290,490,560,740,810,320,525]

# Calculate total and average sales
total_sales=sum(daily_sales_data)
average_sales=total_sales/len(daily_sales_data)

# Write the report to a text file
with open(text_file_name,"w") as file:
    file.write(f"Total Sales for the Month: ${total_sales}\n")
    file.write(f"Average Sales per Day: ${average_sales}\n")
    print("Monthly Sales Report:")
    print(f"Total Sales for the Month: ${total_sales}")
    print(f"Average Sales per Day: ${average_sales:.2f}")
    print(f"Monthly sales report has been written to '{text_file_name}'.")

#Task 17: Stock Replenishment Planning
#products as a list of dictionaries
products = [
    {"Product name": "keyboard", "stock level": 80},
    {"Product name": "mouse", "stock level": 120},
    {"Product name": "monitor", "stock level": 150},
    {"Product name": "printer", "stock level": 50},
    {"Product name": "scanner", "stock level": 65}
]

# threshold for stock levels
threshold = 100

# products that need replenishment
reorder_list = [product["Product name"] for product in products if product["stock level"] < threshold]

print("Products that need replenishment:")
if reorder_list:
    for product in reorder_list:
        print(f"- {product}")
else:
    print("All products have adequate stock levels.")

#Task 18: Data Cleaning Utility
customer_names=["  rahul SHARMA  ","  jahnavi KAPOOR","BASaNTH KUMAR   ","   ANITHA RAGHAVENDRAN   ","    DEEPALI SINGH"]
def clean_customer_name(name):
      return name.strip().title()
cleaned_names=[clean_customer_name(name) for name in customer_names]
print("Cleaned Customer Names:")
for name in cleaned_names:
 print(name)

#Task 19: Simple Sales Forecasting
# Sales data for 3 months
sales_data={"Jan":1500, "Feb":1400, "March":1700}
# Calculate the forecasted sales for the next month
average_sales=sum(sales_data.values())/len(sales_data)
forecasted_sales=average_sales*1.2 #using 1.2 as example based on trend
# Print the forecasted sales data
print("Sales Forecast for Next Month:")
print("Average Sales for last 3 months:",average_sales)
print(f"Based on the last 3 months average, the forecasted sales for April is: ${forecasted_sales:.2f}")

#Task 20: Customer Loyalty Points Calculator
customers_data= [
    {"name": "Anitha", "total_purchase": 120},
    {"name": "Bunty", "total_purchase": 450},
    {"name": "Rahul", "total_purchase": 900},
    {"name": "Jahnavi", "total_purchase": 2000},
    {"name": "Jack", "total_purchase": 75},
]
# Tiered system for loyalty point multipliers
tiers = [
    {"min": 0, "max": 100, "multiplier": 1},
    {"min": 101, "max": 500, "multiplier": 2},
    {"min": 501, "max": 1000, "multiplier": 3},
    {"min": 1001, "max": float("inf"), "multiplier": 5},  # Infinity for no upper limit
]
def calculate_loyalty_points(total_purchase):
    for tier in tiers:
        if tier["min"] <= total_purchase <= tier["max"]:
            return total_purchase * tier["multiplier"]

# Calculate and print loyalty points for each customer
print("Loyalty Points for Customers:")
for customer in customers_data:
    points = calculate_loyalty_points(customer["total_purchase"])
    print(f"{customer['name']}: Total Purchase = ${customer['total_purchase']}, Loyalty Points = {points}")